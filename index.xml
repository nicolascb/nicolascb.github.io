<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nicolas Barbosa - Golang Developer</title>
    <link>https://nicolascb.github.io/</link>
    <description>Recent content on Nicolas Barbosa - Golang Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <lastBuildDate>Sat, 13 Nov 2021 22:16:23 -0300</lastBuildDate><atom:link href="https://nicolascb.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VIM: background toggle</title>
      <link>https://nicolascb.github.io/vim-background-toggle/</link>
      <pubDate>Sat, 13 Nov 2021 22:16:23 -0300</pubDate>
      
      <guid>https://nicolascb.github.io/vim-background-toggle/</guid>
      <description>VIM: background toggle O astigmatismo aqui aumentou e percebi que to sendo mais produtivo usando temas claros durante o dia e temas escuros quando chega a noite.
Criei a função abaixo para me ajudar nesse processo, nela está definido o tema claro e o tema escuro que eu utilizo.
Agora é só apertar F9 para alternar entre esses temas.
let s:darkmode = 0 function! BgToggle() if s:darkmode &amp;quot;&amp;quot; turn on light mode execute &#39;set background=light&#39; execute &#39;colorscheme base16-atelier-dune-light&#39; execute &#39;AirlineTheme base16_atelier_dune_light&#39; let s:darkmode = 0 return endif &amp;quot;&amp;quot; turn on dark mode execute &#39;set background=dark&#39; execute &#39;colorscheme base16-flat&#39; execute &#39;AirlineTheme base16_flat&#39; let s:darkmode = 1 endfunction nnoremap &amp;lt;F9&amp;gt; :call BgToggle()&amp;lt;CR&amp;gt;  </description>
    </item>
    
    <item>
      <title>Testando handlers HTTP em Go</title>
      <link>https://nicolascb.github.io/testando-handlers-http-em-go/</link>
      <pubDate>Sat, 16 Jan 2021 22:07:00 -0300</pubDate>
      
      <guid>https://nicolascb.github.io/testando-handlers-http-em-go/</guid>
      <description>Introdução Lembro que precisei fazer algumas pesquisas para construir testes para a minha primeira API escrita em Go, nesse post vou escrever um breve exemplo de como podemos utilizar o pacote httptest para testar nossos handlers http.
Como testar handlers http em Go? Para que possamos testar qualquer handler HTTP, precisaremos de uma estrutura capaz de construir e armazenar a resposta do handler, como qual foi o status http respondido, valores no header, body e etc.</description>
    </item>
    
  </channel>
</rss>
